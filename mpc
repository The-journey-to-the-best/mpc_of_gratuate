import numpy as np
from math import sin, cos, pi
from scipy.integrate import solve_ivp
from mpc_prepare import *


def mpc_func(x_start,x_goal,t_end):
# Weights of LQR cost
    weight_R = 1
    weight_Q = 10

    #Q and R are tunable parameters
    R = weight_R*np.eye(6)
    Q = weight_Q*np.eye(18)

    for i in [1,2,4,5,7,8,10,11,13,14,16,17]:
        Q[i,i] = 0
    Q = np.eye(18)
    

    # End time of the simulation
    tf = t_end
    x0          = np.zeros(18)
    x_final     = np.zeros(18)

    x0[0]       = x_start[0]
    x0[3]       = x_start[1]
    x0[6]       = x_start[2]
    x0[9]       = x_start[3]
    x0[12]      = x_start[4]
    x0[15]      = x_start[5]
    

    x_final[0]  = x_goal[0]
    x_final[3]  = x_goal[1]
    x_final[6]  = x_goal[2]
    x_final[9]  = x_goal[3]
    x_final[12] = x_goal[4]
    x_final[15] = x_goal[5]
    # Construct our quadrotor controller 
    robotic_arm = Robot(Q, R)
   
    q_joints, Control_input, time_stamp, loss_vals, optimal_cost = robotic_arm.simulate_arm(x0,x_final,tf)
    total_cost = []
    total_cost.append(optimal_cost)
    #create empty dict to save state
    index = [0, 3, 6, 9, 12, 15]

    # 使用列表推导式来一次性生成所有的 角度，角速度，角加速度
    #Retrieve the system state at each time step (elements in each row)
    theta = [np.array([q_joints[i][idx]     for idx in index]) for i in range(len(q_joints))]
    omega = [np.array([q_joints[i][idx + 1] for idx in index]) for i in range(len(q_joints))]
    apha = [np.array([q_joints[i][idx + 2]  for idx in index]) for i in range(len(q_joints))]
    
    return theta, omega, apha, sum(total_cost)
